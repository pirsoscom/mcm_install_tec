# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Install Script for Cluster Registration
#
# V1.0 
#
# Â©2020 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

source ./0_config.sh

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "  "
echo " ${CYAN}  Register MCM-HUB Cluster${NC}"
echo "  "
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "  "
echo "  "
echo "  "





# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Input Parameters${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"

        while getopts "d:h:p:u:n:x:" opt
        do
          case "$opt" in
              d ) INPUT_PATH="$OPTARG" ;;
              h ) INPUT_MCM_HUB_URL="$OPTARG" ;;
              n ) INPUT_IMPORT_NAME="$OPTARG" ;;
              p ) INPUT_PWD="$OPTARG" ;;
              u ) INPUT_USER="$OPTARG" ;;
              x ) INPUT_CONSOLE_PREFIX="$OPTARG";;
          esac
        done


        if [[ $INPUT_PWD == "" ]];
        then
            echo "    ${RED}ERROR${NC}: Please provide the MCM Password"
            echo "    USAGE: $0 -p <MCM_PWD>  -n <MCM_IMPORT_NAME> -x <OCP_CONSOLE_PREFIX> -h <MCM_HUB_URL> [-u <MCM_USER>]  [-d <TEMP_DIRECTORY>] "
            exit 1
        else
          echo "    ${GREEN}Password OK:${NC}                        ************"
          MCM_PWD=$INPUT_PWD
        fi



        if [[ $INPUT_IMPORT_NAME == "" ]];
        then
            echo "    ${RED}ERROR${NC}: Please provide the Import Name"
            echo "    USAGE: $0 -p <MCM_PWD>  -n <MCM_IMPORT_NAME> -x <OCP_CONSOLE_PREFIX> -h <MCM_HUB_URL> [-u <MCM_USER>]  [-d <TEMP_DIRECTORY>] "
            exit 1
        else
          echo "    ${GREEN}Import Name OK:${NC}                     $INPUT_IMPORT_NAME"
          MCM_IMPORT_NAME=$INPUT_IMPORT_NAME
        fi



        if [[ $INPUT_CONSOLE_PREFIX == "" ]];
        then
            echo "    ${RED}ERROR${NC}: Please provide the MCM Password"
            echo "    USAGE: $0 -p <MCM_PWD>  -n <MCM_IMPORT_NAME> -x <OCP_CONSOLE_PREFIX> -h <MCM_HUB_URL> [-u <MCM_USER>]  [-d <TEMP_DIRECTORY>] "
            exit 1
        else
          echo "    ${GREEN}Console Prefix OK:${NC}                  $INPUT_CONSOLE_PREFIX"
          OCP_CONSOLE_PREFIX=$INPUT_CONSOLE_PREFIX
        fi


        if [[ ($INPUT_MCM_HUB_URL == "") ]];
        then
            echo "    ${RED}ERROR${NC}: Please provide the MCM Cluster Address (like https://icp-console.mycluster.net)"
            echo "    USAGE: $0 -p <MCM_PWD>  -n <MCM_IMPORT_NAME> -x <OCP_CONSOLE_PREFIX> -h <MCM_HUB_URL> [-u <MCM_USER>]  [-d <TEMP_DIRECTORY>] "
            exit 1

        else
          echo "    ${GREEN}MCM   OK:${NC}                           $INPUT_MCM_HUB_URL"
          MCM_SERVER=$INPUT_MCM_HUB_URL
        fi



        if [[ $INPUT_USER == "" ]];          
        then
          echo "    ${ORANGE}No User provided, using${NC}             $MCM_USER"
        else
          echo "    ${GREEN}User OK:${NC}                            $INPUT_USER"
          MCM_USER=$INPUT_USER
        fi



        if [[ $INPUT_PATH == "" ]];
        then
          echo "    ${ORANGE}No Path provided, using${NC}             $TEMP_PATH"
        else
          echo "    ${GREEN}Path OK:${NC}                            $INPUT_PATH"
          TEMP_PATH=$INPUT_PATH
        fi



        if [[ ($INPUT_CLUSTER_NAME == "") ]];
        then
          getClusterFQDN
        fi


echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PRE-INSTALL CHECKS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Pre-Install Checks${NC}"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        echo "    Check if trying to register ${CYAN}MCM hub${NC} as Cluster"
        if [[ $MCM_SERVER =~ $CLUSTER_NAME ]];
        then
          echo "    ${ORANGE}WARNING${NC}: you are trying to register the MCM Hub as a managed cluster!"
          echo "       ${RED}You won't be able to deploy Applications to this Cluster!!!!!${NC}"
        else 
          echo "    ${GREEN}OK${NC}"
        fi


echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "



# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Define some Stuff
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${PURPLE}Define some Stuff${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "----------------------------------------------------------------------------------------------------------------------------------------------------"

        getInstallPath

        # SAVE Spoke Context
        export SPOKE_CONTEXT=$(kubectl config current-context)
        export MCM_IMPORT_NAMESPACE=mcm-$MCM_IMPORT_NAME



echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "






# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# PREREQUISITES
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " ${CYAN}Running Prerequisites${NC}"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"

        export SCRIPT_PATH=$(pwd)

        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " ${wrench} Create Config Directory"
          rm -r $INSTALL_PATH/* 
          mkdir -p $INSTALL_PATH 
          cd $INSTALL_PATH
        echo "    ${GREEN}  OK${NC}"
        echo "  "
        

        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " Create ${CYAN}Config File${NC}"
        # MCM login
        cloudctl login -a "${MCM_SERVER}" --skip-ssl-validation -u ${MCM_USER} -p ${MCM_PWD} -n kube-system

        export HUB_CONTEXT=$(kubectl config current-context)

        # Create config file
        cloudctl mc cluster template $MCM_IMPORT_NAME -n $MCM_IMPORT_NAMESPACE > cluster-import-config.yaml


        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " Adapt ${CYAN}Config File${NC}"

        # Adapt config file
        ${SED} -i 's/cloud: "auto-detect"/cloud: "RHOCP"/' cluster-import-config.yaml
        ${SED} -i 's/vendor: "auto-detect"/vendor: "IBM"/' cluster-import-config.yaml
        ${SED} -i 's/# environment: "Dev"/environment: "Prod"/' cluster-import-config.yaml
        ${SED} -i 's/# region: "US"/region: "EU"/' cluster-import-config.yaml
        #${SED} -i 's/enabled: false/enabled: true/' cluster-import-config.yaml


        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " Register the ${CYAN}Cluster${NC}"
        CLUSTER_RESOLVE=$(cloudctl mc cluster create -f cluster-import-config.yaml 2>&1)
        if [[ $CLUSTER_RESOLVE =~ "already exists" ]];
        then
          echo "    ${RED}ERROR${NC}: Cluster $MCM_IMPORT_NAME already exists."
          echo "    ${RED}Aborting${NC}"
          exit 1
        else 
          echo "    ${GREEN}OK${NC}"
        fi

        echo "---------------------------------------------------------------------------------------------------------------------------"
        echo " Importing the ${CYAN}Cluster${NC}"
        # Import the Cluster
        cloudctl mc cluster import $MCM_IMPORT_NAME -n $MCM_IMPORT_NAMESPACE > cluster-import.yaml

echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "  "
echo "  "
echo "  "
echo "  "




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# INSTALL
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"
echo " Install ${CYAN}Klusterlet${NC} into Cluster '$CLUSTER_NAME'"
echo ""
echo "---------------------------------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------------------------------------------------------------"


        # Switch back to Spoke Context
        kubectl config use-context $SPOKE_CONTEXT

        echo "    Check if OpenShift ${BLUE}KUBECONTEXT${NC} is set for        $CLUSTER_NAME"
        KUBECTX_RESOLVE=$(kubectl get routes --all-namespaces 2>&1)
        if [[ $KUBECTX_RESOLVE =~ $CLUSTER_NAME ]];
        then
          echo "    ${GREEN}OK${NC}"
        else 
          echo "    ${RED}ERROR${NC}: Please log into  '$CLUSTER_NAME' via the OpenShift web console"
          exit 1
        fi

        kubectl apply -f cluster-import.yaml

        waitForPodsReady "multicluster-endpoint"


echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo " ${GREEN} Register MCM-HUB Cluster.... DONE${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}----------------------------------------------------------------------------------------------------------------------------------------------------${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"
echo "${GREEN}***************************************************************************************************************************************************${NC}"


